name: Smart Release Workflow

on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: "PR number to base the release on (leave empty for latest merged PR)"
        required: false
        type: string
        default: ""
      bump_type:
        description: "Version bump type"
        required: true
        default: "minor"
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

      - name: Determine PR number
        id: get_pr
        run: |
          if [ -z "${{ github.event.inputs.pr_number }}" ]; then
            echo "Using latest merged PR..."
            # Get latest merged PR
            LATEST_PR=$(gh pr list --limit 1 --state merged --json number,title,body,url)
            if [ -z "$LATEST_PR" ] || [ "$LATEST_PR" = "[]" ]; then
              echo "Error: No merged PRs found"
              exit 1
            fi
            
            # Extract first PR from array
            PR_INFO=$(echo "$LATEST_PR" | jq '.[0]')
            PR_NUMBER=$(echo "$PR_INFO" | jq -r '.number')
            PR_TITLE=$(echo "$PR_INFO" | jq -r '.title')
            PR_BODY=$(echo "$PR_INFO" | jq -r '.body')
            PR_URL=$(echo "$PR_INFO" | jq -r '.url')
          else
            echo "Using provided PR number: ${{ github.event.inputs.pr_number }}"
            # Use provided PR number
            PR_INFO=$(gh pr view ${{ github.event.inputs.pr_number }} --json number,title,body,url)
            PR_NUMBER="${{ github.event.inputs.pr_number }}"
            PR_TITLE=$(echo "$PR_INFO" | jq -r '.title')
            PR_BODY=$(echo "$PR_INFO" | jq -r '.body')
            PR_URL=$(echo "$PR_INFO" | jq -r '.url')
          fi

          # Output variables for next steps
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "pr_title=$PR_TITLE" >> $GITHUB_OUTPUT

          # Escape newlines in PR body for GitHub Actions
          PR_BODY_ESCAPED="${PR_BODY//$'\n'/'%0A'}"
          PR_BODY_ESCAPED="${PR_BODY_ESCAPED//$'\r'/'%0D'}"
          echo "pr_body<<EOF" >> $GITHUB_OUTPUT
          echo "$PR_BODY_ESCAPED" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Debug PR Info
        run: |
          echo "PR Number: ${{ steps.get_pr.outputs.pr_number }}"
          echo "PR Title: ${{ steps.get_pr.outputs.pr_title }}"
          echo "PR URL: ${{ steps.get_pr.outputs.pr_url }}"

      - name: Determine current version
        id: get_version
        run: |
          if [ -f "package.json" ]; then
            CURRENT_VERSION=$(grep -o '"version": "[^"]*"' package.json | cut -d'"' -f4)
            echo "version_file=package.json" >> $GITHUB_OUTPUT
          elif [ -f "version.txt" ]; then
            CURRENT_VERSION=$(cat version.txt)
            echo "version_file=version.txt" >> $GITHUB_OUTPUT
          else
            echo "Error: Could not find package.json or version.txt"
            exit 1
          fi

          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

          # Parse semver components
          MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
          MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
          PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)

          # Calculate new version based on bump type
          if [ "${{ github.event.inputs.bump_type }}" == "major" ]; then
            NEW_VERSION="$((MAJOR + 1)).0.0"
          elif [ "${{ github.event.inputs.bump_type }}" == "minor" ]; then
            NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
          else # patch
            NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
          fi

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update version file
        run: |
          if [ "${{ steps.get_version.outputs.version_file }}" == "package.json" ]; then
            # Update version in package.json
            sed -i "s/\"version\": \"${{ steps.get_version.outputs.current_version }}\"/\"version\": \"${{ steps.get_version.outputs.new_version }}\"/" package.json
          else
            # Update version in version.txt
            echo "${{ steps.get_version.outputs.new_version }}" > version.txt
          fi

      - name: Update CHANGELOG.md
        run: |
          DATE=$(date +%Y-%m-%d)
          PR_TITLE="${{ steps.get_pr.outputs.pr_title }}"
          PR_NUMBER="${{ steps.get_pr.outputs.pr_number }}"
          PR_URL="${{ steps.get_pr.outputs.pr_url }}"
          NEW_VERSION="${{ steps.get_version.outputs.new_version }}"

          # Prepare changelog entry
          CHANGELOG_ENTRY="## ${NEW_VERSION} (${DATE})\n\n"
          CHANGELOG_ENTRY+="### What's Changed\n\n"
          CHANGELOG_ENTRY+="- ${PR_TITLE} [#${PR_NUMBER}](${PR_URL})\n"

          if [ -f "CHANGELOG.md" ]; then
            if grep -q "^# " CHANGELOG.md; then
              head -n1 CHANGELOG.md > temp_changelog.md
              echo -e "\n${CHANGELOG_ENTRY}" >> temp_changelog.md
              tail -n +2 CHANGELOG.md >> temp_changelog.md
              mv temp_changelog.md CHANGELOG.md
            else
              echo -e "# Changelog\n\n${CHANGELOG_ENTRY}" > CHANGELOG.md
            fi
          else
            echo -e "# Changelog\n\n${CHANGELOG_ENTRY}" > CHANGELOG.md
          fi

          head -n20 CHANGELOG.md

      - name: Commit changes
        run: |
          git add CHANGELOG.md ${{ steps.get_version.outputs.version_file }}
          git commit -m "Bump version to ${{ steps.get_version.outputs.new_version }} for PR #${{ steps.get_pr.outputs.pr_number }}"
          git push origin HEAD:${{ github.ref }}

      - name: Create and push tag
        run: |
          git tag -a "v${{ steps.get_version.outputs.new_version }}" -m "${{ steps.get_pr.outputs.pr_title }} (PR #${{ steps.get_pr.outputs.pr_number }})"
          git push origin "v${{ steps.get_version.outputs.new_version }}"

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Extract changelog section for this version
          NEW_VERSION="${{ steps.get_version.outputs.new_version }}"
          RELEASE_NOTES=$(awk "/## $NEW_VERSION/,/## /" CHANGELOG.md | grep -v "^## " | head -n -1 || echo "Release for PR #${{ steps.get_pr.outputs.pr_number }}")

          # Create the release
          gh release create "v$NEW_VERSION" \
            --title "${{ steps.get_pr.outputs.pr_title }}" \
            --notes "$RELEASE_NOTES"
